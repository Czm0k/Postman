{
	"info": {
		"_postman_id": "2621adef-5081-4098-8f9e-c1d0336ee5a5",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"first status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//  Спарсить response body в json.\r",
							"var yolochka = pm.response.json();\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(yolochka.name).to.eql(\"Nikita\");\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(yolochka.age).to.eql(\"22\");\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(yolochka.salary).to.eql(2000);\r",
							"});\r",
							"\r",
							"//  Спарсить request.\r",
							"var parReq = request.data\r",
							"console.log(request.data)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check request name\", function () {\r",
							"    pm.expect(yolochka.name).to.eql(parReq.name);\r",
							"});\r",
							"\r",
							"// Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check request age\", function () {\r",
							"    pm.expect(yolochka.age).to.eql(parReq.age);\r",
							"});\r",
							"\r",
							"// Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check request salary\", function () {\r",
							"    pm.expect(yolochka.salary).to.eql(parseInt(parReq.salary));\r",
							"});\r",
							"\r",
							"// ВЫвести в консоль параметр family из response.\r",
							"var checkFam = yolochka.family;\r",
							"console.log(checkFam);\r",
							"\r",
							"var reqSalary = parReq.salary;\r",
							"var fourSalary = yolochka.family.u_salary_1_5_year\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"u_salary_1_5_year\", function () {\r",
							"    pm.expect(fourSalary).to.eql(reqSalary*4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nikita",
							"type": "text"
						},
						{
							"key": "age",
							"value": "22",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Спарсить response body в json.\r",
							"var kotik = pm.response.json();\r",
							"\r",
							"// Спарсить request.\r",
							"console.log(pm.request.url.query.toObject())\r",
							"var parReq = pm.request.url.query.toObject()\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"My name\", function () {\r",
							"    pm.expect(kotik.name).to.eql(parReq.name);\r",
							"});\r",
							"\r",
							"// // Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"My age\", function () {\r",
							"    pm.expect(kotik.age).to.eql(parReq.age);\r",
							"});\r",
							"\r",
							"// // Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"My salary\", function () {\r",
							"    pm.expect(kotik.salary).to.eql(parseInt(parReq.salary));\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр family из response.\r",
							"var checkFamily = kotik.family;\r",
							"console.log(checkFamily);\r",
							"\r",
							"// Проверить, что у параметра dog есть параметры name.\r",
							"var parametr = pm.response.json().family.pets.dog;\r",
							"console.log(parametr);\r",
							"\r",
							"pm.test(\"dog name\", function (){\r",
							"    pm.expect(parametr).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"//  Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"dog age\", function (){\r",
							"    pm.expect(parametr).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"//  Проверить, что параметр name имеет значение Luky.\r",
							"// Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"var checkName = pm.response.json().family.pets.dog.name;\r",
							"var checkAge = pm.response.json().family.pets.dog.age;\r",
							"\r",
							"pm.test(\"check dog name\", function () {\r",
							"    pm.expect(checkName).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"pm.test(\"check dog age\", function () {\r",
							"    pm.expect(checkAge).to.eql(4);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/object_info_3?name=Nikita&age=22&salary=2000",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var tolik = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var parReq = pm.request.url.query.toObject()\r",
							"console.log(parReq)\r",
							"\r",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"// Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Check myName\", function () {\r",
							"    pm.expect(tolik.name).to.eql(parReq.name);\r",
							"});\r",
							"\r",
							"pm.test(\"Check myName\", function () {\r",
							"    pm.expect(tolik.age).to.eql(+parReq.age);\r",
							"});\r",
							"\r",
							"// Вывести в консоль параметр salary из request.\r",
							"var reqSal = parReq.salary;\r",
							"console.log(reqSal);\r",
							"\r",
							"// Вывести в консоль параметр salary из response.\r",
							"var respSal = tolik.salary;\r",
							"console.log(respSal);\r",
							"\r",
							"// Вывести в консоль 0-й элемент параметра salary из response.\r",
							"var respSal_0 = tolik.salary[0];\r",
							"console.log(respSal_0);\r",
							"\r",
							"//  Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"var respSal_1 = tolik.salary[1];\r",
							"console.log(respSal_1);\r",
							"\r",
							"//  Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"var respSal_2 = tolik.salary[2];\r",
							"console.log(respSal_2);\r",
							"\r",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check 0\", function () {\r",
							"    pm.expect(respSal_0).to.eql(+reqSal);\r",
							"})\r",
							"\r",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check 1\", function () {\r",
							"    pm.expect(+respSal_1).to.eql(reqSal*2);\r",
							"})\r",
							"\r",
							"// Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check 2\", function () {\r",
							"    pm.expect(+respSal_2).to.eql(reqSal*3);\r",
							"})\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", parReq.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", parReq.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", parReq.salary)\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var sal = tolik.salary\r",
							"for (i of sal){\r",
							"    console.log(i)\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Nikita&age=22&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var parc = request.data;\r",
							"console.log(parc)\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"check start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"check qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"check qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"check person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.) \r",
							"var reqSal = +parc.salary\r",
							"pm.test(\"eql salary\", function () {\r",
							"    pm.expect(reqSal).to.eql(jsonData.start_qa_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"eql salary_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(reqSal*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"eql salary_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(reqSal*2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"eql salary_1.5_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(reqSal*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"eql salary_3.5_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(reqSal*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"first in person\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(reqSal);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"var age_1 = +parc.age\r",
							"\r",
							"pm.test(\"check eql u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(age_1)\r",
							"})\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"var fiveYears = jsonData.person.u_salary_5_years\r",
							"\r",
							"pm.test(\"eql u_salary_5_years\", function () {\r",
							"    pm.expect(fiveYears).to.eql(reqSal*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"var prsn = jsonData.person.u_name\r",
							"\r",
							"for (i in prsn){\r",
							"    console.log(i + ' = ' + prsn[i])\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "salary",
			"value": ""
		}
	]
}